#!/usr/bin/env python

import argparse
import sys


from arcsv.arcsv_call_options import DEFAULT_OPTS
from arcsv._version import __version__


def main():
    # import warnings
    # warnings.simplefilter("error")
    # warnings.filterwarnings("ignore", category=DeprecationWarning)

    parser = prepare_argparser()

    if len(sys.argv) < 2:
        args = parser.parse_args(['-h'])
    else:
        args = parser.parse_args()

    print(args)                 # MINOR print this in call_sv (updated args)

    command_name = args.command

    if command_name == 'call':
        from arcsv.call_sv import run
        run(args)
    elif command_name == 'validate':
        pass


def prepare_argparser():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')

    add_call_parser(subparsers)
    add_validate_parser(subparsers)

    return parser


def add_call_parser(subparsers):
    # TODO argument groups
    parser_call = subparsers.add_parser('call',
                                        help='Call SVs from alignment data',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    required = parser_call.add_argument_group('required arguments')
    required.add_argument('-i', '--input_list', required=True, type=str,
                          help='bam file to use for SV calling '
                               '(for multiple files use a comma-separated list')
    required.add_argument('-r', '--region', required=True, type=str,
                          help='chromosome[:start-end]')
    optional = parser_call.add_argument_group('optional arguments')
    optional.add_argument('-o', '--outdir', type=str,
                          help='output folder')
    # optional.add_argument('-D', '--reference_dir', type=str,
    # default='/home/jgarthur/sv/reference')
    # optional.add_argument('-R', '--reference_name', type=str,
    #                       help='reference genome name. [name].fa, [name].fa.fai, and '
    #                            '[name]_gaps.bed will be expected in arcsv/resources')
    optional.add_argument('-R', '--reference_file', type=str,
                          help='path to referece genome file')
    optional.add_argument('-G', '--gap_file', type=str,
                          help='path to referece genome gaps file (BED format)')
    # BEFORE SUBMIT CHANGE DEFAULT LOWER
    optional.add_argument('-v', '--verbosity', type=int,
                          help='how much output? (0-10)')
    optional.add_argument('-C', '--insert_cutoff', type=float,
                          help='determines likelihood ratio cutoff for discordant reads '
                               'which is equivalent to phi(0)/phi(C).')
    optional.add_argument('-t', '--cutoff_type', type=str,
                          help='low/high -- affects all breakpoint support thresholds')
    optional.add_argument('--nondeterministic_seed', action='store_true',
                          help='set random seed based on the current system time'
                               ' (breaks determinism/reproducibility)')
    optional.add_argument('--do_viz', action='store_true')
    # optional.add_argument('--use_mate_tags', action='store_true')
    # optional.add_argument('--use_indels', action='store_true')
    optional.add_argument('--no_pecluster', dest='--do_pecluster', action='store_false')
    optional.add_argument('-f', '--allele_fraction_list', type=str,
                          help='(EXPERIMENTAL) comma-separated list of alternate allele'
                               'fractions to check when calling SVs')

    other = parser_call.add_argument_group('other arguments')
    other.add_argument('--version', action='version', version='%(prog)s ' + __version__)

    parser_call.set_defaults(**DEFAULT_OPTS)


def add_validate_parser(subparsers):
    parser_call = subparsers.add_parser('validate',
                                        help='Validate SVs using ground truth sequences')
    pass
    return parser_call


if __name__ == '__main__':
    main()
